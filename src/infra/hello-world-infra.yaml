AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EmailAddress:
    Description: Email address for cloudwatch alarm
    Type: String
  Ecosystem:
    Description: Ecosystem for tagging resources
    Type: String
  ImageId:
    Description: Image ID for hello world image, this image ID is from ecr
    Type: String
  SSLCert:
    Description: SSL Cert that should be used by the load balancer
    Type: String

Resources:

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Join ["-", [!Ref Ecosystem, Hello, World, AppCluster]]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssocSubnetPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet1

  RouteTableAssocSubnetPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet2

  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer only allow https
      VpcId: !Ref VPC
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: TCP
        ToPort: 443
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5000
      Protocol: HTTPS
      VpcId: !Ref VPC
      HealthCheckPath: /
      TargetType: ip
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - !Ref SSLCert
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443 
      Protocol: HTTPS
      
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AppContainerSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443 
          ToPort: 5000
          SourceSecurityGroupId: !Ref LoadBalancerSecGroup
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: AppTaskDefinition
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      RequiresCompatibilities:
        - FARGATE
      Memory: 0.5Gb
      Cpu: 256
      ContainerDefinitions:
        - Name: !Join ["-", [!Ref Ecosystem, Hello, World, ServiceContainer]]
          PortMappings:
            - ContainerPort: 5000
          Essential: true
          Image: !Ref ImageId
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: !Join ["-", [!Ref Ecosystem, Hello, World, ServiceContainer]]
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      HealthCheckGracePeriodSeconds: 30
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId
        
  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
          Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId
            
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join ["/", [service, !Ref ECSCluster, !GetAtt Service.Name]]
      RoleARN: !GetAtt ECSServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ["-", [!Ref Ecosystem, Hello, World, ServiceAutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 70

  CPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ["-", [!Ref Ecosystem, Hello, World, CPU, Alarm]] 
      AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "10"
      Threshold: "70"
      ComparisonOperator: GreaterThanThreshold 
      AlarmActions:
        - !Ref AlarmSNSTopic

  AlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join ["-", [!Ref Ecosystem, Hello, World, CPU, Alarm, Topic]] 
      Subscription:
        - Protocol: email
          Endpoint: !Ref EmailAddress
      Tags:
        - Key: Ecosystem
          Value: !Ref Ecosystem
        - Key: StackID
          Value: !Ref AWS::StackId
      